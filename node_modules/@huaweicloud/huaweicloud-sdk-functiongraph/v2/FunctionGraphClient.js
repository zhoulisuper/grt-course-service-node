"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequiredError = exports.ParamCreater = exports.FunctionGraphClient = void 0;
var ClientBuilder_1 = require("@huaweicloud/huaweicloud-sdk-core/ClientBuilder");
var AsyncInvokeFunctionRequest_1 = require("./model/AsyncInvokeFunctionRequest");
var AsyncInvokeReservedFunctionRequest_1 = require("./model/AsyncInvokeReservedFunctionRequest");
var BatchDeleteFunctionTriggersRequest_1 = require("./model/BatchDeleteFunctionTriggersRequest");
var BatchDeleteWorkflowsRequest_1 = require("./model/BatchDeleteWorkflowsRequest");
var CancelAsyncInvocationRequest_1 = require("./model/CancelAsyncInvocationRequest");
var CreateDependencyRequest_1 = require("./model/CreateDependencyRequest");
var CreateEventRequest_1 = require("./model/CreateEventRequest");
var CreateFunctionRequest_1 = require("./model/CreateFunctionRequest");
var CreateFunctionTriggerRequest_1 = require("./model/CreateFunctionTriggerRequest");
var CreateFunctionVersionRequest_1 = require("./model/CreateFunctionVersionRequest");
var CreateVersionAliasRequest_1 = require("./model/CreateVersionAliasRequest");
var CreateWorkflowRequest_1 = require("./model/CreateWorkflowRequest");
var DeleteDependencyRequest_1 = require("./model/DeleteDependencyRequest");
var DeleteEventRequest_1 = require("./model/DeleteEventRequest");
var DeleteFunctionAsyncInvokeConfigRequest_1 = require("./model/DeleteFunctionAsyncInvokeConfigRequest");
var DeleteFunctionRequest_1 = require("./model/DeleteFunctionRequest");
var DeleteFunctionTriggerRequest_1 = require("./model/DeleteFunctionTriggerRequest");
var DeleteVersionAliasRequest_1 = require("./model/DeleteVersionAliasRequest");
var ExportFunctionRequest_1 = require("./model/ExportFunctionRequest");
var ImportFunctionRequest_1 = require("./model/ImportFunctionRequest");
var InvokeFunctionRequest_1 = require("./model/InvokeFunctionRequest");
var ListDependenciesRequest_1 = require("./model/ListDependenciesRequest");
var ListEventsRequest_1 = require("./model/ListEventsRequest");
var ListFunctionAsyncInvocationsRequest_1 = require("./model/ListFunctionAsyncInvocationsRequest");
var ListFunctionAsyncInvokeConfigRequest_1 = require("./model/ListFunctionAsyncInvokeConfigRequest");
var ListFunctionStatisticsRequest_1 = require("./model/ListFunctionStatisticsRequest");
var ListFunctionTriggersRequest_1 = require("./model/ListFunctionTriggersRequest");
var ListFunctionVersionsRequest_1 = require("./model/ListFunctionVersionsRequest");
var ListFunctionsRequest_1 = require("./model/ListFunctionsRequest");
var ListStatisticsRequest_1 = require("./model/ListStatisticsRequest");
var ListVersionAliasesRequest_1 = require("./model/ListVersionAliasesRequest");
var ListWorkflowExecutionsRequest_1 = require("./model/ListWorkflowExecutionsRequest");
var ListWorkflowsRequest_1 = require("./model/ListWorkflowsRequest");
var RetryWorkFlowRequest_1 = require("./model/RetryWorkFlowRequest");
var ShowDependencyRequest_1 = require("./model/ShowDependencyRequest");
var ShowEventRequest_1 = require("./model/ShowEventRequest");
var ShowFunctionAsyncInvokeConfigRequest_1 = require("./model/ShowFunctionAsyncInvokeConfigRequest");
var ShowFunctionCodeRequest_1 = require("./model/ShowFunctionCodeRequest");
var ShowFunctionConfigRequest_1 = require("./model/ShowFunctionConfigRequest");
var ShowFunctionTriggerRequest_1 = require("./model/ShowFunctionTriggerRequest");
var ShowLtsLogDetailsRequest_1 = require("./model/ShowLtsLogDetailsRequest");
var ShowTenantMetricRequest_1 = require("./model/ShowTenantMetricRequest");
var ShowTracingRequest_1 = require("./model/ShowTracingRequest");
var ShowVersionAliasRequest_1 = require("./model/ShowVersionAliasRequest");
var ShowWorkFlowMetricRequest_1 = require("./model/ShowWorkFlowMetricRequest");
var ShowWorkFlowRequest_1 = require("./model/ShowWorkFlowRequest");
var ShowWorkflowExecutionRequest_1 = require("./model/ShowWorkflowExecutionRequest");
var StartSyncWorkflowExecutionRequest_1 = require("./model/StartSyncWorkflowExecutionRequest");
var StartWorkflowExecutionRequest_1 = require("./model/StartWorkflowExecutionRequest");
var StopWorkFlowRequest_1 = require("./model/StopWorkFlowRequest");
var UpdateDependencyRequest_1 = require("./model/UpdateDependencyRequest");
var UpdateEventRequest_1 = require("./model/UpdateEventRequest");
var UpdateFunctionAsyncInvokeConfigRequest_1 = require("./model/UpdateFunctionAsyncInvokeConfigRequest");
var UpdateFunctionCodeRequest_1 = require("./model/UpdateFunctionCodeRequest");
var UpdateFunctionConfigRequest_1 = require("./model/UpdateFunctionConfigRequest");
var UpdateFunctionReservedInstancesRequest_1 = require("./model/UpdateFunctionReservedInstancesRequest");
var UpdateTracingRequest_1 = require("./model/UpdateTracingRequest");
var UpdateTriggerRequest_1 = require("./model/UpdateTriggerRequest");
var UpdateVersionAliasRequest_1 = require("./model/UpdateVersionAliasRequest");
var UpdateWorkFlowRequest_1 = require("./model/UpdateWorkFlowRequest");
var FunctionGraphClient = /** @class */ (function () {
    function FunctionGraphClient(client) {
        this.hcClient = client;
    }
    FunctionGraphClient.newBuilder = function () {
        return new ClientBuilder_1.ClientBuilder(newClient);
    };
    FunctionGraphClient.prototype.getPath = function () {
        return __dirname;
    };
    /**
     * 异步执行函数。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 异步执行函数。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {{ [key: string]: object; }} asyncInvokeFunctionRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.asyncInvokeFunction = function (asyncInvokeFunctionRequest) {
        var options = (0, exports.ParamCreater)().asyncInvokeFunction(asyncInvokeFunctionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 函数异步执行并返回预留实例ID用于场景指客户端请求执行比较费时任务，不需要同步等待执行完成返回结果，该方法提前返回任务执行对应的预留实例ID, 如果预留实例有异常，
     * 可以通过该实例ID把对应实例删除（该接口主要针对白名单用户）。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 函数异步执行并返回预留实例ID。
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {{ [key: string]: object; }} asyncInvokeReservedFunctionRequestBody 函数异步执行并返回预留实例请求body体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.asyncInvokeReservedFunction = function (asyncInvokeReservedFunctionRequest) {
        var options = (0, exports.ParamCreater)().asyncInvokeReservedFunction(asyncInvokeReservedFunctionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 停止函数异步调用请求
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 停止函数异步调用请求
     * @param {string} functionUrn 函数URN
     * @param {CancelAsyncInvocationRequestBody} cancelAsyncInvocationRequestBody 更新tags的请求体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.cancelAsyncInvocation = function (cancelAsyncInvocationRequest) {
        var options = (0, exports.ParamCreater)().cancelAsyncInvocation(cancelAsyncInvocationRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建依赖包。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 创建依赖包
     * @param {CreateDependencyRequestBody} createDependencyRequestBody 添加依赖包的请求体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.createDependency = function (createDependencyRequest) {
        var options = (0, exports.ParamCreater)().createDependency(createDependencyRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建测试事件。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 创建测试事件
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {CreateEventRequestBody} createEventRequestBody 创建测试事件请求体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.createEvent = function (createEventRequest) {
        var options = (0, exports.ParamCreater)().createEvent(createEventRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建指定的函数。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 创建函数。
     * @param {CreateFunctionRequestBody} createFunctionRequestBody 创建函数请求body体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.createFunction = function (createFunctionRequest) {
        var options = (0, exports.ParamCreater)().createFunction(createFunctionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 发布函数版本。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 发布函数版本。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {CreateFunctionVersionRequestBody} createFunctionVersionRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.createFunctionVersion = function (createFunctionVersionRequest) {
        var options = (0, exports.ParamCreater)().createFunctionVersion(createFunctionVersionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建函数灰度版本别名。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 创建函数版本别名。
     * @param {string} functionUrn 函数的URN。
     * @param {CreateVersionAliasRequestBody} createVersionAliasRequestBody 创建函数请求body体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.createVersionAlias = function (createVersionAliasRequest) {
        var options = (0, exports.ParamCreater)().createVersionAlias(createVersionAliasRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除指定的依赖包。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 删除依赖包
     * @param {string} dependId 依赖包的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.deleteDependency = function (deleteDependencyRequest) {
        var options = (0, exports.ParamCreater)().deleteDependency(deleteDependencyRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除测试事件。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 删除测试事件
     * @param {string} eventId 事件ID。
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.deleteEvent = function (deleteEventRequest) {
        var options = (0, exports.ParamCreater)().deleteEvent(deleteEventRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除指定的函数或者特定的版本（不允许删除latest版本）。
     *
     * 如果URN中包含函数版本或者别名，则删除特定的函数版本或者别名指向的版本以及该版本关联的trigger。
     * 如果URN中不包含版本或者别名，则删除整个函数，包含所有版本以及别名，触发器。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 删除函数/版本。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。  不允许删除函数的latest版本，如要删除整个函数（包含所有版本），提供不带任何版本号/别名的urn，如： urn:fss:xxxxxxxx:7aad83af3e8d42e99ac194e8419e2c9b:function:default:test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.deleteFunction = function (deleteFunctionRequest) {
        var options = (0, exports.ParamCreater)().deleteFunction(deleteFunctionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除函数异步配置信息。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 删除函数异步配置信息。
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.deleteFunctionAsyncInvokeConfig = function (deleteFunctionAsyncInvokeConfigRequest) {
        var options = (0, exports.ParamCreater)().deleteFunctionAsyncInvokeConfig(deleteFunctionAsyncInvokeConfigRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除函数版本别名。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 删除函数版本别名。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {string} aliasName 要删除的别名名称。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.deleteVersionAlias = function (deleteVersionAliasRequest) {
        var options = (0, exports.ParamCreater)().deleteVersionAlias(deleteVersionAliasRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 开通lts日志上报功能。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 开通lts日志上报功能。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.enableLtsLogs = function () {
        var options = (0, exports.ParamCreater)().enableLtsLogs();
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 导出函数。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 导出函数。
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {boolean} [config] 是否导出函数配置
     * @param {boolean} [code] 是否导出函数代码
     * @param {'type' | 'code'} [type] 兼容老的方式，type&#x3D;code代表导出代码,type&#x3D;config代码导出配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.exportFunction = function (exportFunctionRequest) {
        var options = (0, exports.ParamCreater)().exportFunction(exportFunctionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 导入函数。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 导入函数。
     * @param {ImportFunctionRequestBody} importFunctionRequestBody 导入函数的请求body体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.importFunction = function (importFunctionRequest) {
        var options = (0, exports.ParamCreater)().importFunction(importFunctionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 同步调用指的是客户端请求需要明确等到响应结果，也就是说这样的请求必须得调用到用户的函数，并且等到调用完成才返回。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 同步执行函数。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {{ [key: string]: object; }} invokeFunctionRequestBody
     * @param {string} [xCffLogType] 取值为：tail（返回函数执行后的4K日志），或者为空（不返回日志）。
     * @param {string} [xCFFRequestVersion] 返回体格式，取值v0,v1。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.invokeFunction = function (invokeFunctionRequest) {
        var options = (0, exports.ParamCreater)().invokeFunction(invokeFunctionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取依赖包列表。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取依赖包列表
     * @param {'public' | 'private' | 'all'} [dependencyType] 依赖包类型public：公开,private:私有，all：全部。缺省时查询全量。
     * @param {'Java8' | 'Java11' | 'Node.js6.10' | 'Node.js8.10' | 'Node.js10.16' | 'Node.js12.13' | 'Node.js14.18' | 'Python2.7' | 'Python3.6' | 'Python3.9' | 'Go1.8' | 'Go1.x' | 'C#(.NET Core 2.0)' | 'C#(.NET Core 2.1)' | 'C#(.NET Core 3.1)' | 'PHP7.3'} [runtime] 运行时语言 Java11、Nodejs14.18、Python3.9在type为v2时支持
     * @param {string} [name] 依赖包名称。
     * @param {string} [marker] 上一次查询依赖包的最后记录位置，默认为\&quot;0\&quot;。
     * @param {string} [limit] 本次查询可获取的依赖包的最大数目，默认为\&quot;400\&quot;。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listDependencies = function (listDependenciesRequest) {
        var options = (0, exports.ParamCreater)().listDependencies(listDependenciesRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定函数的测试事件列表。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取测试事件列表
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listEvents = function (listEventsRequest) {
        var options = (0, exports.ParamCreater)().listEvents(listEventsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取函数异步调用请求列表
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取函数异步调用请求列表
     * @param {string} functionUrn 函数URN
     * @param {string} [requestId] 需要查询的异步请求ID。如果不指定，默认查询所有异步调用记录
     * @param {string} [limit] 本次查询最大返回的数据条数，最大值500，默认值100
     * @param {'WAIT' | 'RUNNING' | 'SUCCESS' | 'FAIL' | 'DISCARD'} [status] 本次查询指定的异步调用状态，支持5种状态，如果不指定，则查询所有状态的调用记录 WAIT: 等待 RUNNING: 执行中 SUCCESS: 执行成功 FAIL: 执行失败 DISCARD: 请求丢弃
     * @param {Date} [queryBeginTime] 搜索起始时间（格式为YYYY-MM-DD\&#39;T\&#39;HH:mm:ss,UTC时间）。如果不指定默认为当前时间前1小时
     * @param {Date} [queryEndTime] 搜索结束时间（格式为YYYY-MM-DD\&#39;T\&#39;HH:mm:ss,UTC时间）。如果不指定默认为当前时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listFunctionAsyncInvocations = function (listFunctionAsyncInvocationsRequest) {
        var options = (0, exports.ParamCreater)().listFunctionAsyncInvocations(listFunctionAsyncInvocationsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取函数异步配置列表。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取函数异步配置列表
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {string} [marker] 上一次查询到的最后的记录位置。
     * @param {string} [limit] 每页显示的条目数量。 - 如果不提供该值或者提供的值等于0，则使用默认值：10，最大值100，大于100取值100。 - 如果该值小于0，则返回参数错误。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listFunctionAsyncInvokeConfig = function (listFunctionAsyncInvokeConfigRequest) {
        var options = (0, exports.ParamCreater)().listFunctionAsyncInvokeConfig(listFunctionAsyncInvokeConfigRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定时间段的函数运行指标。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定时间段的函数运行指标
     * @param {string} funcUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {string} period 获取最近多少分钟内函数执行的指标。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listFunctionStatistics = function (listFunctionStatisticsRequest) {
        var options = (0, exports.ParamCreater)().listFunctionStatistics(listFunctionStatisticsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定函数的版本列表。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定函数的版本列表。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {string} [marker] 上一次查询到的最后的记录位置。
     * @param {string} [maxitems] 每次查询获取的最大函数记录数量。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listFunctionVersions = function (listFunctionVersionsRequest) {
        var options = (0, exports.ParamCreater)().listFunctionVersions(listFunctionVersionsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取函数列表
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取函数列表
     * @param {string} [marker] 上一次查询到的最后的记录位置。
     * @param {string} [maxitems] 每次查询获取的最大函数记录数量 最大值：400 如果不提供该值或者提供的值大于400或等于0，则使用默认值：400 如果该值小于0，则返回参数错误。
     * @param {string} [packageName] 应用名称。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listFunctions = function (listFunctionsRequest) {
        var options = (0, exports.ParamCreater)().listFunctions(listFunctionsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询租户配额
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 查询租户配额
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listQuotas = function () {
        var options = (0, exports.ParamCreater)().listQuotas();
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 租户函数统计信息。
     *
     * 返回三类的统计信息，函数格式和大小使用情况包括配额和使用量，流量报告。
     * 通过查询参数filter可以进行过滤，查询参数period可以指定返回的时间段。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 租户函数统计信息
     * @param {'monitor_data' | 'monthly_report'} filter 参数过滤器。
     * @param {string} [period] 时间段单位为分钟，与filter参数配合使用。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listStatistics = function (listStatisticsRequest) {
        var options = (0, exports.ParamCreater)().listStatistics(listStatisticsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取函数版本别名列表。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定函数所有版本别名列表。
     * @param {string} functionUrn 函数的URN。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listVersionAliases = function (listVersionAliasesRequest) {
        var options = (0, exports.ParamCreater)().listVersionAliases(listVersionAliasesRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定依赖包。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定依赖包
     * @param {string} dependId 依赖包的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showDependency = function (showDependencyRequest) {
        var options = (0, exports.ParamCreater)().showDependency(showDependencyRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取测试事件详细信息。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取测试事件详细信息
     * @param {string} eventId 事件ID。
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showEvent = function (showEventRequest) {
        var options = (0, exports.ParamCreater)().showEvent(showEventRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取函数异步配置信息。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取函数异步配置信息。
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showFunctionAsyncInvokeConfig = function (showFunctionAsyncInvokeConfigRequest) {
        var options = (0, exports.ParamCreater)().showFunctionAsyncInvokeConfig(showFunctionAsyncInvokeConfigRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定函数的代码。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定函数代码。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showFunctionCode = function (showFunctionCodeRequest) {
        var options = (0, exports.ParamCreater)().showFunctionCode(showFunctionCodeRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定函数的metadata。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取函数的metadata。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showFunctionConfig = function (showFunctionConfigRequest) {
        var options = (0, exports.ParamCreater)().showFunctionConfig(showFunctionConfigRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定函数的lts日志组日志流配置。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定函数的lts日志组日志流配置。
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showLtsLogDetails = function (showLtsLogDetailsRequest) {
        var options = (0, exports.ParamCreater)().showLtsLogDetails(showLtsLogDetailsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取函数调用链配置
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取函数调用链配置
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showTracing = function (showTracingRequest) {
        var options = (0, exports.ParamCreater)().showTracing(showTracingRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取函数指定的版本别名信息。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取函数版本的指定别名信息。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {string} aliasName 要查询的别名名称。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showVersionAlias = function (showVersionAliasRequest) {
        var options = (0, exports.ParamCreater)().showVersionAlias(showVersionAliasRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新依赖包指定依赖包。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 更新依赖包指定依赖包
     * @param {string} dependId 依赖包的ID。
     * @param {UpdateDependencyRequestBody} updateDependencyRequestBody 更新依赖包的请求体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateDependency = function (updateDependencyRequest) {
        var options = (0, exports.ParamCreater)().updateDependency(updateDependencyRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新测试事件。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 更新测试事件
     * @param {string} eventId 事件ID。
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {UpdateEventRequestBody} updateEventRequestBody 更新测试事件的请求体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateEvent = function (updateEventRequest) {
        var options = (0, exports.ParamCreater)().updateEvent(updateEventRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 设置函数异步配置信息。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 设置函数异步配置信息。
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {UpdateFunctionAsyncInvokeConfigRequestBody} updateFunctionAsyncInvokeConfigRequestBody 设置函数异步配置请求体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateFunctionAsyncInvokeConfig = function (updateFunctionAsyncInvokeConfigRequest) {
        var options = (0, exports.ParamCreater)().updateFunctionAsyncInvokeConfig(updateFunctionAsyncInvokeConfigRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 修改指定的函数的代码。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 修改函数代码。
     * @param {string} functionUrn 函数的URN，详细解释见表1 FunctionGraph函数字段说明表的描述。
     * @param {UpdateFunctionCodeRequestBody} updateFunctionCodeRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateFunctionCode = function (updateFunctionCodeRequest) {
        var options = (0, exports.ParamCreater)().updateFunctionCode(updateFunctionCodeRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 修改指定的函数的metadata信息。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 修改函数的metadata信息。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型。
     * @param {UpdateFunctionConfigRequestBody} updateFunctionConfigRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateFunctionConfig = function (updateFunctionConfigRequest) {
        var options = (0, exports.ParamCreater)().updateFunctionConfig(updateFunctionConfigRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 为函数绑定预留实例
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 更新函数预留实例个数
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {UpdateFunctionReservedInstancesRequestBody} updateFunctionReservedInstancesRequestBody 更新函数预留实例请求体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateFunctionReservedInstances = function (updateFunctionReservedInstancesRequest) {
        var options = (0, exports.ParamCreater)().updateFunctionReservedInstances(updateFunctionReservedInstancesRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 修改函数调用链配置,开通/修改传入aksk，关闭aksk传空
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 修改函数调用链配置
     * @param {string} functionUrn 函数的URN（Uniform Resource Name），唯一标识函数。
     * @param {UpdateTracingRequestBody} updateTracingRequestBody 请求body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateTracing = function (updateTracingRequest) {
        var options = (0, exports.ParamCreater)().updateTracing(updateTracingRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 修改函数版本别名信息。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 修改函数版本别名信息。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {string} aliasName 要更新的别名名称。
     * @param {UpdateVersionAliasRequestBody} updateVersionAliasRequestBody 创建函数请求body体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateVersionAlias = function (updateVersionAliasRequest) {
        var options = (0, exports.ParamCreater)().updateVersionAlias(updateVersionAliasRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除指定函数所有触发器设置。
     *
     * 在提供函数版本且非latest的情况下，删除对应函数版本的触发器。
     * 在提供函数别名的情况下，删除对应函数别名的触发器。
     * 在不提供函数版本（也不提供别名）或版本为latest的情况下，删除该函数所有的触发器（包括所有版本和别名）。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 删除指定函数的所有触发器。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.batchDeleteFunctionTriggers = function (batchDeleteFunctionTriggersRequest) {
        var options = (0, exports.ParamCreater)().batchDeleteFunctionTriggers(batchDeleteFunctionTriggersRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建触发器。
     *
     * - 可以创建的触发器类型包括TIMER、APIG、CTS、DDS、DMS、DIS、LTS、OBS、SMN、KAFKA。
     * - DDS和KAFKA触发器创建时默认为DISABLED状态，其他触发器默认为ACTIVE状态。
     * - TIMER、DDS、DMS、KAFKA、LTS触发器支持禁用，其他触发器不支持。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 创建触发器。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {CreateFunctionTriggerRequestBody} createFunctionTriggerRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.createFunctionTrigger = function (createFunctionTriggerRequest) {
        var options = (0, exports.ParamCreater)().createFunctionTrigger(createFunctionTriggerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除触发器。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 删除触发器。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {'TIMER' | 'APIG' | 'CTS' | 'DDS' | 'DMS' | 'DIS' | 'LTS' | 'OBS' | 'SMN' | 'KAFKA'} triggerTypeCode 触发器类型代码。
     * @param {string} triggerId 触发器编码。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.deleteFunctionTrigger = function (deleteFunctionTriggerRequest) {
        var options = (0, exports.ParamCreater)().deleteFunctionTrigger(deleteFunctionTriggerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定函数的所有触发器设置。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定函数的所有触发器。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listFunctionTriggers = function (listFunctionTriggersRequest) {
        var options = (0, exports.ParamCreater)().listFunctionTriggers(listFunctionTriggersRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取特定触发器的信息。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定触发器的信息。
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {'TIMER' | 'APIG' | 'CTS' | 'DDS' | 'DMS' | 'DIS' | 'LTS' | 'OBS' | 'SMN' | 'KAFKA'} triggerTypeCode
     * @param {string} triggerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showFunctionTrigger = function (showFunctionTriggerRequest) {
        var options = (0, exports.ParamCreater)().showFunctionTrigger(showFunctionTriggerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新触发器
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 更新触发器
     * @param {string} functionUrn 函数的URN，详细解释见FunctionGraph函数模型的描述。
     * @param {'TIMER' | 'APIG' | 'CTS' | 'DDS' | 'DMS' | 'DIS' | 'LTS' | 'OBS' | 'SMN' | 'KAFKA'} triggerTypeCode 触发器类型代码。
     * @param {string} triggerId 触发器编码。
     * @param {UpdateTriggerRequestBody} updateTriggerRequestBody 更新触发器的请求body体。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateTrigger = function (updateTriggerRequest) {
        var options = (0, exports.ParamCreater)().updateTrigger(updateTriggerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除工作流列表
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 删除工作流列表
     * @param {BatchDeleteWorkflowsRequestBody} batchDeleteWorkflowsRequestBody 函数流批量操作body体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.batchDeleteWorkflows = function (batchDeleteWorkflowsRequest) {
        var options = (0, exports.ParamCreater)().batchDeleteWorkflows(batchDeleteWorkflowsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建工作流列表
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 创建工作流列表
     * @param {CreateWorkflowRequestBody} createWorkflowRequestBody 函数流创建body体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.createWorkflow = function (createWorkflowRequest) {
        var options = (0, exports.ParamCreater)().createWorkflow(createWorkflowRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定函数流执行实例列表
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定函数流执行实例列表
     * @param {string} workflowId 函数工作流ID
     * @param {number} [limit] 分页查询，每页显示的条目数量，最大数量200，超过200后只返回200
     * @param {'success' | 'fail' | 'running' | 'timeout' | 'cancel'} [status] 需要过滤的流程实例状态
     * @param {string} [startTime] 查询开始时间，UTC时间。若起始时间未填写，以终止时间前推3天为起始时间
     * @param {string} [endTime] 查询开始时间，UTC时间。若终止时间未填写，以起始时间后退3天未终止时间。若均未填写，默认查询最近3天数据。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listWorkflowExecutions = function (listWorkflowExecutionsRequest) {
        var options = (0, exports.ParamCreater)().listWorkflowExecutions(listWorkflowExecutionsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询工作流列表
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 查询工作流列表
     * @param {string} [workflowName] 函数流名称
     * @param {number} [limit] 分页查询，每页显示的条目数量，最大数量200，超过200后只返回200
     * @param {number} [offset] 分页查询，分页的偏移量，表示从此偏移量开始查询，偏移量小于0时，自动转换为0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.listWorkflows = function (listWorkflowsRequest) {
        var options = (0, exports.ParamCreater)().listWorkflows(listWorkflowsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 重试工作流
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 重试工作流
     * @param {string} workflowId 函数工作流ID
     * @param {string} executionId 函数流执行实例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.retryWorkFlow = function (retryWorkFlowRequest) {
        var options = (0, exports.ParamCreater)().retryWorkFlow(retryWorkFlowRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取函数流指标
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取函数流指标
     * @param {string} [period] 时间段，单位为分钟
     * @param {string} [startTime] 开始时间，精确到ms的时间戳
     * @param {string} [endTime] 结束时间，精确到ms的时间戳
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showTenantMetric = function (showTenantMetricRequest) {
        var options = (0, exports.ParamCreater)().showTenantMetric(showTenantMetricRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定函数流实例
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定函数流实例
     * @param {string} workflowId 函数工作流ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showWorkFlow = function (showWorkFlowRequest) {
        var options = (0, exports.ParamCreater)().showWorkFlow(showWorkFlowRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定工作流指标
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定工作流指标
     * @param {string} workflowUrn 函数工作流URN, 格式为： urn:fss:&lt;region_id&gt;:&lt;project_id&gt;:workflow:\\&lt;package\\&gt;:&lt;workflow_name&gt;:\\&lt;version\\&gt; 注意： package当前只支持default version当前只支持latest
     * @param {string} [period] 时间段，单位为分钟
     * @param {string} [startTime] 开始时间，精确到ms的时间戳
     * @param {string} [endTime] 结束时间，精确到ms的时间戳
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showWorkFlowMetric = function (showWorkFlowMetricRequest) {
        var options = (0, exports.ParamCreater)().showWorkFlowMetric(showWorkFlowMetricRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取指定函数流执行实例。
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 获取指定函数流执行实例
     * @param {string} workflowId 函数工作流ID
     * @param {string} executionId 函数流执行实例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.showWorkflowExecution = function (showWorkflowExecutionRequest) {
        var options = (0, exports.ParamCreater)().showWorkflowExecution(showWorkflowExecutionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 同步执行函数流
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 同步执行函数流
     * @param {string} workflowId 函数工作流ID
     * @param {StartSyncWorkflowExecutionRequestBody} startSyncWorkflowExecutionRequestBody 函数流执行body体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.startSyncWorkflowExecution = function (startSyncWorkflowExecutionRequest) {
        var options = (0, exports.ParamCreater)().startSyncWorkflowExecution(startSyncWorkflowExecutionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 开始执行函数流
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 开始执行函数流
     * @param {string} workflowId 函数工作流ID
     * @param {StartWorkflowExecutionRequestBody} startWorkflowExecutionRequestBody 函数流创建body体
     * @param {string} [xCreateTime] workflowRun task create time
     * @param {string} [xWorkflowRunID] workflowRun id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.startWorkflowExecution = function (startWorkflowExecutionRequest) {
        var options = (0, exports.ParamCreater)().startWorkflowExecution(startWorkflowExecutionRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 停止工作流
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 停止工作流
     * @param {string} workflowId 函数工作流ID
     * @param {string} executionId 函数流执行实例ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.stopWorkFlow = function (stopWorkFlowRequest) {
        var options = (0, exports.ParamCreater)().stopWorkFlow(stopWorkFlowRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 修改指定函数流实例
     *
     * 详细说明请参考华为云API Explorer。
     * Please refer to Huawei cloud API Explorer for details.
     *
     * @summary 修改指定函数流实例
     * @param {string} workflowId 函数工作流ID
     * @param {UpdateWorkflowRequestBody} updateWorkflowRequestBody 函数流创建body体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    FunctionGraphClient.prototype.updateWorkFlow = function (updateWorkFlowRequest) {
        var options = (0, exports.ParamCreater)().updateWorkFlow(updateWorkFlowRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    return FunctionGraphClient;
}());
exports.FunctionGraphClient = FunctionGraphClient;
var ParamCreater = function () {
    return {
        /**
         * 异步执行函数。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        asyncInvokeFunction: function (asyncInvokeFunctionRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/invocations-async",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (asyncInvokeFunctionRequest !== null && asyncInvokeFunctionRequest !== undefined) {
                if (asyncInvokeFunctionRequest instanceof AsyncInvokeFunctionRequest_1.AsyncInvokeFunctionRequest) {
                    functionUrn = asyncInvokeFunctionRequest.functionUrn;
                    body = asyncInvokeFunctionRequest.body;
                }
                else {
                    functionUrn = asyncInvokeFunctionRequest['function_urn'];
                    body = asyncInvokeFunctionRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling asyncInvokeFunction.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 函数异步执行并返回预留实例ID用于场景指客户端请求执行比较费时任务，不需要同步等待执行完成返回结果，该方法提前返回任务执行对应的预留实例ID, 如果预留实例有异常，
         * 可以通过该实例ID把对应实例删除（该接口主要针对白名单用户）。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        asyncInvokeReservedFunction: function (asyncInvokeReservedFunctionRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/reserved-invocations",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (asyncInvokeReservedFunctionRequest !== null && asyncInvokeReservedFunctionRequest !== undefined) {
                if (asyncInvokeReservedFunctionRequest instanceof AsyncInvokeReservedFunctionRequest_1.AsyncInvokeReservedFunctionRequest) {
                    functionUrn = asyncInvokeReservedFunctionRequest.functionUrn;
                    body = asyncInvokeReservedFunctionRequest.body;
                }
                else {
                    functionUrn = asyncInvokeReservedFunctionRequest['function_urn'];
                    body = asyncInvokeReservedFunctionRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling asyncInvokeReservedFunction.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 停止函数异步调用请求
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        cancelAsyncInvocation: function (cancelAsyncInvocationRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/cancel",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (cancelAsyncInvocationRequest !== null && cancelAsyncInvocationRequest !== undefined) {
                if (cancelAsyncInvocationRequest instanceof CancelAsyncInvocationRequest_1.CancelAsyncInvocationRequest) {
                    functionUrn = cancelAsyncInvocationRequest.functionUrn;
                    body = cancelAsyncInvocationRequest.body;
                }
                else {
                    functionUrn = cancelAsyncInvocationRequest['function_urn'];
                    body = cancelAsyncInvocationRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling cancelAsyncInvocation.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建依赖包。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        createDependency: function (createDependencyRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/dependencies",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createDependencyRequest !== null && createDependencyRequest !== undefined) {
                if (createDependencyRequest instanceof CreateDependencyRequest_1.CreateDependencyRequest) {
                    body = createDependencyRequest.body;
                }
                else {
                    body = createDependencyRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建测试事件。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        createEvent: function (createEventRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/events",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (createEventRequest !== null && createEventRequest !== undefined) {
                if (createEventRequest instanceof CreateEventRequest_1.CreateEventRequest) {
                    functionUrn = createEventRequest.functionUrn;
                    body = createEventRequest.body;
                }
                else {
                    functionUrn = createEventRequest['function_urn'];
                    body = createEventRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling createEvent.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建指定的函数。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        createFunction: function (createFunctionRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createFunctionRequest !== null && createFunctionRequest !== undefined) {
                if (createFunctionRequest instanceof CreateFunctionRequest_1.CreateFunctionRequest) {
                    body = createFunctionRequest.body;
                }
                else {
                    body = createFunctionRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 发布函数版本。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        createFunctionVersion: function (createFunctionVersionRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/versions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (createFunctionVersionRequest !== null && createFunctionVersionRequest !== undefined) {
                if (createFunctionVersionRequest instanceof CreateFunctionVersionRequest_1.CreateFunctionVersionRequest) {
                    functionUrn = createFunctionVersionRequest.functionUrn;
                    body = createFunctionVersionRequest.body;
                }
                else {
                    functionUrn = createFunctionVersionRequest['function_urn'];
                    body = createFunctionVersionRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling createFunctionVersion.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建函数灰度版本别名。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        createVersionAlias: function (createVersionAliasRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/aliases",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (createVersionAliasRequest !== null && createVersionAliasRequest !== undefined) {
                if (createVersionAliasRequest instanceof CreateVersionAliasRequest_1.CreateVersionAliasRequest) {
                    functionUrn = createVersionAliasRequest.functionUrn;
                    body = createVersionAliasRequest.body;
                }
                else {
                    functionUrn = createVersionAliasRequest['function_urn'];
                    body = createVersionAliasRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling createVersionAlias.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除指定的依赖包。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        deleteDependency: function (deleteDependencyRequest) {
            var options = {
                method: "DELETE",
                url: "/v2/{project_id}/fgs/dependencies/{depend_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var dependId;
            if (deleteDependencyRequest !== null && deleteDependencyRequest !== undefined) {
                if (deleteDependencyRequest instanceof DeleteDependencyRequest_1.DeleteDependencyRequest) {
                    dependId = deleteDependencyRequest.dependId;
                }
                else {
                    dependId = deleteDependencyRequest['depend_id'];
                }
            }
            if (dependId === null || dependId === undefined) {
                throw new RequiredError('dependId', 'Required parameter dependId was null or undefined when calling deleteDependency.');
            }
            options.pathParams = { 'depend_id': dependId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除测试事件。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        deleteEvent: function (deleteEventRequest) {
            var options = {
                method: "DELETE",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/events/{event_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var eventId;
            var functionUrn;
            if (deleteEventRequest !== null && deleteEventRequest !== undefined) {
                if (deleteEventRequest instanceof DeleteEventRequest_1.DeleteEventRequest) {
                    eventId = deleteEventRequest.eventId;
                    functionUrn = deleteEventRequest.functionUrn;
                }
                else {
                    eventId = deleteEventRequest['event_id'];
                    functionUrn = deleteEventRequest['function_urn'];
                }
            }
            if (eventId === null || eventId === undefined) {
                throw new RequiredError('eventId', 'Required parameter eventId was null or undefined when calling deleteEvent.');
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling deleteEvent.');
            }
            options.pathParams = { 'event_id': eventId, 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除指定的函数或者特定的版本（不允许删除latest版本）。
         *
         * 如果URN中包含函数版本或者别名，则删除特定的函数版本或者别名指向的版本以及该版本关联的trigger。
         * 如果URN中不包含版本或者别名，则删除整个函数，包含所有版本以及别名，触发器。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        deleteFunction: function (deleteFunctionRequest) {
            var options = {
                method: "DELETE",
                url: "/v2/{project_id}/fgs/functions/{function_urn}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (deleteFunctionRequest !== null && deleteFunctionRequest !== undefined) {
                if (deleteFunctionRequest instanceof DeleteFunctionRequest_1.DeleteFunctionRequest) {
                    functionUrn = deleteFunctionRequest.functionUrn;
                }
                else {
                    functionUrn = deleteFunctionRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling deleteFunction.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除函数异步配置信息。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        deleteFunctionAsyncInvokeConfig: function (deleteFunctionAsyncInvokeConfigRequest) {
            var options = {
                method: "DELETE",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/async-invoke-config",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (deleteFunctionAsyncInvokeConfigRequest !== null && deleteFunctionAsyncInvokeConfigRequest !== undefined) {
                if (deleteFunctionAsyncInvokeConfigRequest instanceof DeleteFunctionAsyncInvokeConfigRequest_1.DeleteFunctionAsyncInvokeConfigRequest) {
                    functionUrn = deleteFunctionAsyncInvokeConfigRequest.functionUrn;
                }
                else {
                    functionUrn = deleteFunctionAsyncInvokeConfigRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling deleteFunctionAsyncInvokeConfig.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除函数版本别名。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        deleteVersionAlias: function (deleteVersionAliasRequest) {
            var options = {
                method: "DELETE",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/aliases/{alias_name}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            var aliasName;
            if (deleteVersionAliasRequest !== null && deleteVersionAliasRequest !== undefined) {
                if (deleteVersionAliasRequest instanceof DeleteVersionAliasRequest_1.DeleteVersionAliasRequest) {
                    functionUrn = deleteVersionAliasRequest.functionUrn;
                    aliasName = deleteVersionAliasRequest.aliasName;
                }
                else {
                    functionUrn = deleteVersionAliasRequest['function_urn'];
                    aliasName = deleteVersionAliasRequest['alias_name'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling deleteVersionAlias.');
            }
            if (aliasName === null || aliasName === undefined) {
                throw new RequiredError('aliasName', 'Required parameter aliasName was null or undefined when calling deleteVersionAlias.');
            }
            options.pathParams = { 'function_urn': functionUrn, 'alias_name': aliasName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 开通lts日志上报功能。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        enableLtsLogs: function () {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions/enable-lts-logs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 导出函数。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        exportFunction: function (exportFunctionRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/export",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var functionUrn;
            var config;
            var code;
            var type;
            if (exportFunctionRequest !== null && exportFunctionRequest !== undefined) {
                if (exportFunctionRequest instanceof ExportFunctionRequest_1.ExportFunctionRequest) {
                    functionUrn = exportFunctionRequest.functionUrn;
                    config = exportFunctionRequest.config;
                    code = exportFunctionRequest.code;
                    type = exportFunctionRequest.type;
                }
                else {
                    functionUrn = exportFunctionRequest['function_urn'];
                    config = exportFunctionRequest['config'];
                    code = exportFunctionRequest['code'];
                    type = exportFunctionRequest['type'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling exportFunction.');
            }
            if (config !== null && config !== undefined) {
                localVarQueryParameter['config'] = config;
            }
            if (code !== null && code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 导入函数。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        importFunction: function (importFunctionRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions/import",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (importFunctionRequest !== null && importFunctionRequest !== undefined) {
                if (importFunctionRequest instanceof ImportFunctionRequest_1.ImportFunctionRequest) {
                    body = importFunctionRequest.body;
                }
                else {
                    body = importFunctionRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 同步调用指的是客户端请求需要明确等到响应结果，也就是说这样的请求必须得调用到用户的函数，并且等到调用完成才返回。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        invokeFunction: function (invokeFunctionRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/invocations",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            var xCffLogType;
            var xCFFRequestVersion;
            if (invokeFunctionRequest !== null && invokeFunctionRequest !== undefined) {
                if (invokeFunctionRequest instanceof InvokeFunctionRequest_1.InvokeFunctionRequest) {
                    functionUrn = invokeFunctionRequest.functionUrn;
                    body = invokeFunctionRequest.body;
                    xCffLogType = invokeFunctionRequest.xCffLogType;
                    xCFFRequestVersion = invokeFunctionRequest.xCFFRequestVersion;
                }
                else {
                    functionUrn = invokeFunctionRequest['function_urn'];
                    body = invokeFunctionRequest['body'];
                    xCffLogType = invokeFunctionRequest['X-Cff-Log-Type'];
                    xCFFRequestVersion = invokeFunctionRequest['X-CFF-Request-Version'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling invokeFunction.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (xCffLogType !== undefined && xCffLogType !== null) {
                localVarHeaderParameter['X-Cff-Log-Type'] = String(xCffLogType);
            }
            if (xCFFRequestVersion !== undefined && xCFFRequestVersion !== null) {
                localVarHeaderParameter['X-CFF-Request-Version'] = String(xCFFRequestVersion);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取依赖包列表。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listDependencies: function (listDependenciesRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/dependencies",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var dependencyType;
            var runtime;
            var name;
            var marker;
            var limit;
            if (listDependenciesRequest !== null && listDependenciesRequest !== undefined) {
                if (listDependenciesRequest instanceof ListDependenciesRequest_1.ListDependenciesRequest) {
                    dependencyType = listDependenciesRequest.dependencyType;
                    runtime = listDependenciesRequest.runtime;
                    name = listDependenciesRequest.name;
                    marker = listDependenciesRequest.marker;
                    limit = listDependenciesRequest.limit;
                }
                else {
                    dependencyType = listDependenciesRequest['dependency_type'];
                    runtime = listDependenciesRequest['runtime'];
                    name = listDependenciesRequest['name'];
                    marker = listDependenciesRequest['marker'];
                    limit = listDependenciesRequest['limit'];
                }
            }
            if (dependencyType !== null && dependencyType !== undefined) {
                localVarQueryParameter['dependency_type'] = dependencyType;
            }
            if (runtime !== null && runtime !== undefined) {
                localVarQueryParameter['runtime'] = runtime;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定函数的测试事件列表。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listEvents: function (listEventsRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/events",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (listEventsRequest !== null && listEventsRequest !== undefined) {
                if (listEventsRequest instanceof ListEventsRequest_1.ListEventsRequest) {
                    functionUrn = listEventsRequest.functionUrn;
                }
                else {
                    functionUrn = listEventsRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling listEvents.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取函数异步调用请求列表
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listFunctionAsyncInvocations: function (listFunctionAsyncInvocationsRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/async-invocations",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var functionUrn;
            var requestId;
            var limit;
            var status;
            var queryBeginTime;
            var queryEndTime;
            if (listFunctionAsyncInvocationsRequest !== null && listFunctionAsyncInvocationsRequest !== undefined) {
                if (listFunctionAsyncInvocationsRequest instanceof ListFunctionAsyncInvocationsRequest_1.ListFunctionAsyncInvocationsRequest) {
                    functionUrn = listFunctionAsyncInvocationsRequest.functionUrn;
                    requestId = listFunctionAsyncInvocationsRequest.requestId;
                    limit = listFunctionAsyncInvocationsRequest.limit;
                    status = listFunctionAsyncInvocationsRequest.status;
                    queryBeginTime = listFunctionAsyncInvocationsRequest.queryBeginTime;
                    queryEndTime = listFunctionAsyncInvocationsRequest.queryEndTime;
                }
                else {
                    functionUrn = listFunctionAsyncInvocationsRequest['function_urn'];
                    requestId = listFunctionAsyncInvocationsRequest['request_id'];
                    limit = listFunctionAsyncInvocationsRequest['limit'];
                    status = listFunctionAsyncInvocationsRequest['status'];
                    queryBeginTime = listFunctionAsyncInvocationsRequest['query_begin_time'];
                    queryEndTime = listFunctionAsyncInvocationsRequest['query_end_time'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling listFunctionAsyncInvocations.');
            }
            if (requestId !== null && requestId !== undefined) {
                localVarQueryParameter['request_id'] = requestId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (queryBeginTime !== null && queryBeginTime !== undefined) {
                localVarQueryParameter['query_begin_time'] = queryBeginTime;
            }
            if (queryEndTime !== null && queryEndTime !== undefined) {
                localVarQueryParameter['query_end_time'] = queryEndTime;
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取函数异步配置列表。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listFunctionAsyncInvokeConfig: function (listFunctionAsyncInvokeConfigRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/async-invoke-configs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var functionUrn;
            var marker;
            var limit;
            if (listFunctionAsyncInvokeConfigRequest !== null && listFunctionAsyncInvokeConfigRequest !== undefined) {
                if (listFunctionAsyncInvokeConfigRequest instanceof ListFunctionAsyncInvokeConfigRequest_1.ListFunctionAsyncInvokeConfigRequest) {
                    functionUrn = listFunctionAsyncInvokeConfigRequest.functionUrn;
                    marker = listFunctionAsyncInvokeConfigRequest.marker;
                    limit = listFunctionAsyncInvokeConfigRequest.limit;
                }
                else {
                    functionUrn = listFunctionAsyncInvokeConfigRequest['function_urn'];
                    marker = listFunctionAsyncInvokeConfigRequest['marker'];
                    limit = listFunctionAsyncInvokeConfigRequest['limit'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling listFunctionAsyncInvokeConfig.');
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定时间段的函数运行指标。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listFunctionStatistics: function (listFunctionStatisticsRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{func_urn}/statistics/{period}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var funcUrn;
            var period;
            if (listFunctionStatisticsRequest !== null && listFunctionStatisticsRequest !== undefined) {
                if (listFunctionStatisticsRequest instanceof ListFunctionStatisticsRequest_1.ListFunctionStatisticsRequest) {
                    funcUrn = listFunctionStatisticsRequest.funcUrn;
                    period = listFunctionStatisticsRequest.period;
                }
                else {
                    funcUrn = listFunctionStatisticsRequest['func_urn'];
                    period = listFunctionStatisticsRequest['period'];
                }
            }
            if (funcUrn === null || funcUrn === undefined) {
                throw new RequiredError('funcUrn', 'Required parameter funcUrn was null or undefined when calling listFunctionStatistics.');
            }
            if (period === null || period === undefined) {
                throw new RequiredError('period', 'Required parameter period was null or undefined when calling listFunctionStatistics.');
            }
            options.pathParams = { 'func_urn': funcUrn, 'period': period, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定函数的版本列表。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listFunctionVersions: function (listFunctionVersionsRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/versions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var functionUrn;
            var marker;
            var maxitems;
            if (listFunctionVersionsRequest !== null && listFunctionVersionsRequest !== undefined) {
                if (listFunctionVersionsRequest instanceof ListFunctionVersionsRequest_1.ListFunctionVersionsRequest) {
                    functionUrn = listFunctionVersionsRequest.functionUrn;
                    marker = listFunctionVersionsRequest.marker;
                    maxitems = listFunctionVersionsRequest.maxitems;
                }
                else {
                    functionUrn = listFunctionVersionsRequest['function_urn'];
                    marker = listFunctionVersionsRequest['marker'];
                    maxitems = listFunctionVersionsRequest['maxitems'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling listFunctionVersions.');
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (maxitems !== null && maxitems !== undefined) {
                localVarQueryParameter['maxitems'] = maxitems;
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取函数列表
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listFunctions: function (listFunctionsRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var marker;
            var maxitems;
            var packageName;
            if (listFunctionsRequest !== null && listFunctionsRequest !== undefined) {
                if (listFunctionsRequest instanceof ListFunctionsRequest_1.ListFunctionsRequest) {
                    marker = listFunctionsRequest.marker;
                    maxitems = listFunctionsRequest.maxitems;
                    packageName = listFunctionsRequest.packageName;
                }
                else {
                    marker = listFunctionsRequest['marker'];
                    maxitems = listFunctionsRequest['maxitems'];
                    packageName = listFunctionsRequest['package_name'];
                }
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (maxitems !== null && maxitems !== undefined) {
                localVarQueryParameter['maxitems'] = maxitems;
            }
            if (packageName !== null && packageName !== undefined) {
                localVarQueryParameter['package_name'] = packageName;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询租户配额
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listQuotas: function () {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/quotas",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 租户函数统计信息。
         *
         * 返回三类的统计信息，函数格式和大小使用情况包括配额和使用量，流量报告。
         * 通过查询参数filter可以进行过滤，查询参数period可以指定返回的时间段。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listStatistics: function (listStatisticsRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/statistics",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var filter;
            var period;
            if (listStatisticsRequest !== null && listStatisticsRequest !== undefined) {
                if (listStatisticsRequest instanceof ListStatisticsRequest_1.ListStatisticsRequest) {
                    filter = listStatisticsRequest.filter;
                    period = listStatisticsRequest.period;
                }
                else {
                    filter = listStatisticsRequest['filter'];
                    period = listStatisticsRequest['period'];
                }
            }
            if (filter === null || filter === undefined) {
                throw new RequiredError('filter', 'Required parameter filter was null or undefined when calling listStatistics.');
            }
            if (filter !== null && filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            if (period !== null && period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取函数版本别名列表。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listVersionAliases: function (listVersionAliasesRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/aliases",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (listVersionAliasesRequest !== null && listVersionAliasesRequest !== undefined) {
                if (listVersionAliasesRequest instanceof ListVersionAliasesRequest_1.ListVersionAliasesRequest) {
                    functionUrn = listVersionAliasesRequest.functionUrn;
                }
                else {
                    functionUrn = listVersionAliasesRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling listVersionAliases.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定依赖包。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showDependency: function (showDependencyRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/dependencies/{depend_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var dependId;
            if (showDependencyRequest !== null && showDependencyRequest !== undefined) {
                if (showDependencyRequest instanceof ShowDependencyRequest_1.ShowDependencyRequest) {
                    dependId = showDependencyRequest.dependId;
                }
                else {
                    dependId = showDependencyRequest['depend_id'];
                }
            }
            if (dependId === null || dependId === undefined) {
                throw new RequiredError('dependId', 'Required parameter dependId was null or undefined when calling showDependency.');
            }
            options.pathParams = { 'depend_id': dependId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取测试事件详细信息。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showEvent: function (showEventRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/events/{event_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var eventId;
            var functionUrn;
            if (showEventRequest !== null && showEventRequest !== undefined) {
                if (showEventRequest instanceof ShowEventRequest_1.ShowEventRequest) {
                    eventId = showEventRequest.eventId;
                    functionUrn = showEventRequest.functionUrn;
                }
                else {
                    eventId = showEventRequest['event_id'];
                    functionUrn = showEventRequest['function_urn'];
                }
            }
            if (eventId === null || eventId === undefined) {
                throw new RequiredError('eventId', 'Required parameter eventId was null or undefined when calling showEvent.');
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling showEvent.');
            }
            options.pathParams = { 'event_id': eventId, 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取函数异步配置信息。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showFunctionAsyncInvokeConfig: function (showFunctionAsyncInvokeConfigRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/async-invoke-config",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (showFunctionAsyncInvokeConfigRequest !== null && showFunctionAsyncInvokeConfigRequest !== undefined) {
                if (showFunctionAsyncInvokeConfigRequest instanceof ShowFunctionAsyncInvokeConfigRequest_1.ShowFunctionAsyncInvokeConfigRequest) {
                    functionUrn = showFunctionAsyncInvokeConfigRequest.functionUrn;
                }
                else {
                    functionUrn = showFunctionAsyncInvokeConfigRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling showFunctionAsyncInvokeConfig.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定函数的代码。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showFunctionCode: function (showFunctionCodeRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/code",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (showFunctionCodeRequest !== null && showFunctionCodeRequest !== undefined) {
                if (showFunctionCodeRequest instanceof ShowFunctionCodeRequest_1.ShowFunctionCodeRequest) {
                    functionUrn = showFunctionCodeRequest.functionUrn;
                }
                else {
                    functionUrn = showFunctionCodeRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling showFunctionCode.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定函数的metadata。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showFunctionConfig: function (showFunctionConfigRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/config",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (showFunctionConfigRequest !== null && showFunctionConfigRequest !== undefined) {
                if (showFunctionConfigRequest instanceof ShowFunctionConfigRequest_1.ShowFunctionConfigRequest) {
                    functionUrn = showFunctionConfigRequest.functionUrn;
                }
                else {
                    functionUrn = showFunctionConfigRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling showFunctionConfig.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定函数的lts日志组日志流配置。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showLtsLogDetails: function (showLtsLogDetailsRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/lts-log-detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (showLtsLogDetailsRequest !== null && showLtsLogDetailsRequest !== undefined) {
                if (showLtsLogDetailsRequest instanceof ShowLtsLogDetailsRequest_1.ShowLtsLogDetailsRequest) {
                    functionUrn = showLtsLogDetailsRequest.functionUrn;
                }
                else {
                    functionUrn = showLtsLogDetailsRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling showLtsLogDetails.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取函数调用链配置
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showTracing: function (showTracingRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/tracing",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (showTracingRequest !== null && showTracingRequest !== undefined) {
                if (showTracingRequest instanceof ShowTracingRequest_1.ShowTracingRequest) {
                    functionUrn = showTracingRequest.functionUrn;
                }
                else {
                    functionUrn = showTracingRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling showTracing.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取函数指定的版本别名信息。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showVersionAlias: function (showVersionAliasRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/aliases/{alias_name}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            var aliasName;
            if (showVersionAliasRequest !== null && showVersionAliasRequest !== undefined) {
                if (showVersionAliasRequest instanceof ShowVersionAliasRequest_1.ShowVersionAliasRequest) {
                    functionUrn = showVersionAliasRequest.functionUrn;
                    aliasName = showVersionAliasRequest.aliasName;
                }
                else {
                    functionUrn = showVersionAliasRequest['function_urn'];
                    aliasName = showVersionAliasRequest['alias_name'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling showVersionAlias.');
            }
            if (aliasName === null || aliasName === undefined) {
                throw new RequiredError('aliasName', 'Required parameter aliasName was null or undefined when calling showVersionAlias.');
            }
            options.pathParams = { 'function_urn': functionUrn, 'alias_name': aliasName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新依赖包指定依赖包。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateDependency: function (updateDependencyRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/dependencies/{depend_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var dependId;
            if (updateDependencyRequest !== null && updateDependencyRequest !== undefined) {
                if (updateDependencyRequest instanceof UpdateDependencyRequest_1.UpdateDependencyRequest) {
                    dependId = updateDependencyRequest.dependId;
                    body = updateDependencyRequest.body;
                }
                else {
                    dependId = updateDependencyRequest['depend_id'];
                    body = updateDependencyRequest['body'];
                }
            }
            if (dependId === null || dependId === undefined) {
                throw new RequiredError('dependId', 'Required parameter dependId was null or undefined when calling updateDependency.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'depend_id': dependId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新测试事件。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateEvent: function (updateEventRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/events/{event_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var eventId;
            var functionUrn;
            if (updateEventRequest !== null && updateEventRequest !== undefined) {
                if (updateEventRequest instanceof UpdateEventRequest_1.UpdateEventRequest) {
                    eventId = updateEventRequest.eventId;
                    functionUrn = updateEventRequest.functionUrn;
                    body = updateEventRequest.body;
                }
                else {
                    eventId = updateEventRequest['event_id'];
                    functionUrn = updateEventRequest['function_urn'];
                    body = updateEventRequest['body'];
                }
            }
            if (eventId === null || eventId === undefined) {
                throw new RequiredError('eventId', 'Required parameter eventId was null or undefined when calling updateEvent.');
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling updateEvent.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'event_id': eventId, 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 设置函数异步配置信息。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateFunctionAsyncInvokeConfig: function (updateFunctionAsyncInvokeConfigRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/async-invoke-config",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (updateFunctionAsyncInvokeConfigRequest !== null && updateFunctionAsyncInvokeConfigRequest !== undefined) {
                if (updateFunctionAsyncInvokeConfigRequest instanceof UpdateFunctionAsyncInvokeConfigRequest_1.UpdateFunctionAsyncInvokeConfigRequest) {
                    functionUrn = updateFunctionAsyncInvokeConfigRequest.functionUrn;
                    body = updateFunctionAsyncInvokeConfigRequest.body;
                }
                else {
                    functionUrn = updateFunctionAsyncInvokeConfigRequest['function_urn'];
                    body = updateFunctionAsyncInvokeConfigRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling updateFunctionAsyncInvokeConfig.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 修改指定的函数的代码。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateFunctionCode: function (updateFunctionCodeRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/code",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (updateFunctionCodeRequest !== null && updateFunctionCodeRequest !== undefined) {
                if (updateFunctionCodeRequest instanceof UpdateFunctionCodeRequest_1.UpdateFunctionCodeRequest) {
                    functionUrn = updateFunctionCodeRequest.functionUrn;
                    body = updateFunctionCodeRequest.body;
                }
                else {
                    functionUrn = updateFunctionCodeRequest['function_urn'];
                    body = updateFunctionCodeRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling updateFunctionCode.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 修改指定的函数的metadata信息。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateFunctionConfig: function (updateFunctionConfigRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/config",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (updateFunctionConfigRequest !== null && updateFunctionConfigRequest !== undefined) {
                if (updateFunctionConfigRequest instanceof UpdateFunctionConfigRequest_1.UpdateFunctionConfigRequest) {
                    functionUrn = updateFunctionConfigRequest.functionUrn;
                    body = updateFunctionConfigRequest.body;
                }
                else {
                    functionUrn = updateFunctionConfigRequest['function_urn'];
                    body = updateFunctionConfigRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling updateFunctionConfig.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 为函数绑定预留实例
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateFunctionReservedInstances: function (updateFunctionReservedInstancesRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/reservedinstances",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (updateFunctionReservedInstancesRequest !== null && updateFunctionReservedInstancesRequest !== undefined) {
                if (updateFunctionReservedInstancesRequest instanceof UpdateFunctionReservedInstancesRequest_1.UpdateFunctionReservedInstancesRequest) {
                    functionUrn = updateFunctionReservedInstancesRequest.functionUrn;
                    body = updateFunctionReservedInstancesRequest.body;
                }
                else {
                    functionUrn = updateFunctionReservedInstancesRequest['function_urn'];
                    body = updateFunctionReservedInstancesRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling updateFunctionReservedInstances.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 修改函数调用链配置,开通/修改传入aksk，关闭aksk传空
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateTracing: function (updateTracingRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/tracing",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (updateTracingRequest !== null && updateTracingRequest !== undefined) {
                if (updateTracingRequest instanceof UpdateTracingRequest_1.UpdateTracingRequest) {
                    functionUrn = updateTracingRequest.functionUrn;
                    body = updateTracingRequest.body;
                }
                else {
                    functionUrn = updateTracingRequest['function_urn'];
                    body = updateTracingRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling updateTracing.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 修改函数版本别名信息。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateVersionAlias: function (updateVersionAliasRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/functions/{function_urn}/aliases/{alias_name}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            var aliasName;
            if (updateVersionAliasRequest !== null && updateVersionAliasRequest !== undefined) {
                if (updateVersionAliasRequest instanceof UpdateVersionAliasRequest_1.UpdateVersionAliasRequest) {
                    functionUrn = updateVersionAliasRequest.functionUrn;
                    aliasName = updateVersionAliasRequest.aliasName;
                    body = updateVersionAliasRequest.body;
                }
                else {
                    functionUrn = updateVersionAliasRequest['function_urn'];
                    aliasName = updateVersionAliasRequest['alias_name'];
                    body = updateVersionAliasRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling updateVersionAlias.');
            }
            if (aliasName === null || aliasName === undefined) {
                throw new RequiredError('aliasName', 'Required parameter aliasName was null or undefined when calling updateVersionAlias.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, 'alias_name': aliasName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除指定函数所有触发器设置。
         *
         * 在提供函数版本且非latest的情况下，删除对应函数版本的触发器。
         * 在提供函数别名的情况下，删除对应函数别名的触发器。
         * 在不提供函数版本（也不提供别名）或版本为latest的情况下，删除该函数所有的触发器（包括所有版本和别名）。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        batchDeleteFunctionTriggers: function (batchDeleteFunctionTriggersRequest) {
            var options = {
                method: "DELETE",
                url: "/v2/{project_id}/fgs/triggers/{function_urn}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (batchDeleteFunctionTriggersRequest !== null && batchDeleteFunctionTriggersRequest !== undefined) {
                if (batchDeleteFunctionTriggersRequest instanceof BatchDeleteFunctionTriggersRequest_1.BatchDeleteFunctionTriggersRequest) {
                    functionUrn = batchDeleteFunctionTriggersRequest.functionUrn;
                }
                else {
                    functionUrn = batchDeleteFunctionTriggersRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling batchDeleteFunctionTriggers.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建触发器。
         *
         * - 可以创建的触发器类型包括TIMER、APIG、CTS、DDS、DMS、DIS、LTS、OBS、SMN、KAFKA。
         * - DDS和KAFKA触发器创建时默认为DISABLED状态，其他触发器默认为ACTIVE状态。
         * - TIMER、DDS、DMS、KAFKA、LTS触发器支持禁用，其他触发器不支持。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        createFunctionTrigger: function (createFunctionTriggerRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/triggers/{function_urn}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            if (createFunctionTriggerRequest !== null && createFunctionTriggerRequest !== undefined) {
                if (createFunctionTriggerRequest instanceof CreateFunctionTriggerRequest_1.CreateFunctionTriggerRequest) {
                    functionUrn = createFunctionTriggerRequest.functionUrn;
                    body = createFunctionTriggerRequest.body;
                }
                else {
                    functionUrn = createFunctionTriggerRequest['function_urn'];
                    body = createFunctionTriggerRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling createFunctionTrigger.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除触发器。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        deleteFunctionTrigger: function (deleteFunctionTriggerRequest) {
            var options = {
                method: "DELETE",
                url: "/v2/{project_id}/fgs/triggers/{function_urn}/{trigger_type_code}/{trigger_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            var triggerTypeCode;
            var triggerId;
            if (deleteFunctionTriggerRequest !== null && deleteFunctionTriggerRequest !== undefined) {
                if (deleteFunctionTriggerRequest instanceof DeleteFunctionTriggerRequest_1.DeleteFunctionTriggerRequest) {
                    functionUrn = deleteFunctionTriggerRequest.functionUrn;
                    triggerTypeCode = deleteFunctionTriggerRequest.triggerTypeCode;
                    triggerId = deleteFunctionTriggerRequest.triggerId;
                }
                else {
                    functionUrn = deleteFunctionTriggerRequest['function_urn'];
                    triggerTypeCode = deleteFunctionTriggerRequest['trigger_type_code'];
                    triggerId = deleteFunctionTriggerRequest['trigger_id'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling deleteFunctionTrigger.');
            }
            if (triggerTypeCode === null || triggerTypeCode === undefined) {
                throw new RequiredError('triggerTypeCode', 'Required parameter triggerTypeCode was null or undefined when calling deleteFunctionTrigger.');
            }
            if (triggerId === null || triggerId === undefined) {
                throw new RequiredError('triggerId', 'Required parameter triggerId was null or undefined when calling deleteFunctionTrigger.');
            }
            options.pathParams = { 'function_urn': functionUrn, 'trigger_type_code': triggerTypeCode, 'trigger_id': triggerId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定函数的所有触发器设置。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listFunctionTriggers: function (listFunctionTriggersRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/triggers/{function_urn}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            if (listFunctionTriggersRequest !== null && listFunctionTriggersRequest !== undefined) {
                if (listFunctionTriggersRequest instanceof ListFunctionTriggersRequest_1.ListFunctionTriggersRequest) {
                    functionUrn = listFunctionTriggersRequest.functionUrn;
                }
                else {
                    functionUrn = listFunctionTriggersRequest['function_urn'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling listFunctionTriggers.');
            }
            options.pathParams = { 'function_urn': functionUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取特定触发器的信息。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showFunctionTrigger: function (showFunctionTriggerRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/triggers/{function_urn}/{trigger_type_code}/{trigger_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var functionUrn;
            var triggerTypeCode;
            var triggerId;
            if (showFunctionTriggerRequest !== null && showFunctionTriggerRequest !== undefined) {
                if (showFunctionTriggerRequest instanceof ShowFunctionTriggerRequest_1.ShowFunctionTriggerRequest) {
                    functionUrn = showFunctionTriggerRequest.functionUrn;
                    triggerTypeCode = showFunctionTriggerRequest.triggerTypeCode;
                    triggerId = showFunctionTriggerRequest.triggerId;
                }
                else {
                    functionUrn = showFunctionTriggerRequest['function_urn'];
                    triggerTypeCode = showFunctionTriggerRequest['trigger_type_code'];
                    triggerId = showFunctionTriggerRequest['trigger_id'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling showFunctionTrigger.');
            }
            if (triggerTypeCode === null || triggerTypeCode === undefined) {
                throw new RequiredError('triggerTypeCode', 'Required parameter triggerTypeCode was null or undefined when calling showFunctionTrigger.');
            }
            if (triggerId === null || triggerId === undefined) {
                throw new RequiredError('triggerId', 'Required parameter triggerId was null or undefined when calling showFunctionTrigger.');
            }
            options.pathParams = { 'function_urn': functionUrn, 'trigger_type_code': triggerTypeCode, 'trigger_id': triggerId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新触发器
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateTrigger: function (updateTriggerRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/triggers/{function_urn}/{trigger_type_code}/{trigger_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var functionUrn;
            var triggerTypeCode;
            var triggerId;
            if (updateTriggerRequest !== null && updateTriggerRequest !== undefined) {
                if (updateTriggerRequest instanceof UpdateTriggerRequest_1.UpdateTriggerRequest) {
                    functionUrn = updateTriggerRequest.functionUrn;
                    triggerTypeCode = updateTriggerRequest.triggerTypeCode;
                    triggerId = updateTriggerRequest.triggerId;
                    body = updateTriggerRequest.body;
                }
                else {
                    functionUrn = updateTriggerRequest['function_urn'];
                    triggerTypeCode = updateTriggerRequest['trigger_type_code'];
                    triggerId = updateTriggerRequest['trigger_id'];
                    body = updateTriggerRequest['body'];
                }
            }
            if (functionUrn === null || functionUrn === undefined) {
                throw new RequiredError('functionUrn', 'Required parameter functionUrn was null or undefined when calling updateTrigger.');
            }
            if (triggerTypeCode === null || triggerTypeCode === undefined) {
                throw new RequiredError('triggerTypeCode', 'Required parameter triggerTypeCode was null or undefined when calling updateTrigger.');
            }
            if (triggerId === null || triggerId === undefined) {
                throw new RequiredError('triggerId', 'Required parameter triggerId was null or undefined when calling updateTrigger.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'function_urn': functionUrn, 'trigger_type_code': triggerTypeCode, 'trigger_id': triggerId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除工作流列表
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        batchDeleteWorkflows: function (batchDeleteWorkflowsRequest) {
            var options = {
                method: "DELETE",
                url: "/v2/{project_id}/fgs/workflows",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (batchDeleteWorkflowsRequest !== null && batchDeleteWorkflowsRequest !== undefined) {
                if (batchDeleteWorkflowsRequest instanceof BatchDeleteWorkflowsRequest_1.BatchDeleteWorkflowsRequest) {
                    body = batchDeleteWorkflowsRequest.body;
                }
                else {
                    body = batchDeleteWorkflowsRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建工作流列表
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        createWorkflow: function (createWorkflowRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/workflows",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createWorkflowRequest !== null && createWorkflowRequest !== undefined) {
                if (createWorkflowRequest instanceof CreateWorkflowRequest_1.CreateWorkflowRequest) {
                    body = createWorkflowRequest.body;
                }
                else {
                    body = createWorkflowRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定函数流执行实例列表
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listWorkflowExecutions: function (listWorkflowExecutionsRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/workflows/{workflow_id}/executions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var workflowId;
            var limit;
            var status;
            var startTime;
            var endTime;
            if (listWorkflowExecutionsRequest !== null && listWorkflowExecutionsRequest !== undefined) {
                if (listWorkflowExecutionsRequest instanceof ListWorkflowExecutionsRequest_1.ListWorkflowExecutionsRequest) {
                    workflowId = listWorkflowExecutionsRequest.workflowId;
                    limit = listWorkflowExecutionsRequest.limit;
                    status = listWorkflowExecutionsRequest.status;
                    startTime = listWorkflowExecutionsRequest.startTime;
                    endTime = listWorkflowExecutionsRequest.endTime;
                }
                else {
                    workflowId = listWorkflowExecutionsRequest['workflow_id'];
                    limit = listWorkflowExecutionsRequest['limit'];
                    status = listWorkflowExecutionsRequest['status'];
                    startTime = listWorkflowExecutionsRequest['start_time'];
                    endTime = listWorkflowExecutionsRequest['end_time'];
                }
            }
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId', 'Required parameter workflowId was null or undefined when calling listWorkflowExecutions.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'workflow_id': workflowId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询工作流列表
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        listWorkflows: function (listWorkflowsRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/workflows",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var workflowName;
            var limit;
            var offset;
            if (listWorkflowsRequest !== null && listWorkflowsRequest !== undefined) {
                if (listWorkflowsRequest instanceof ListWorkflowsRequest_1.ListWorkflowsRequest) {
                    workflowName = listWorkflowsRequest.workflowName;
                    limit = listWorkflowsRequest.limit;
                    offset = listWorkflowsRequest.offset;
                }
                else {
                    workflowName = listWorkflowsRequest['workflow_name'];
                    limit = listWorkflowsRequest['limit'];
                    offset = listWorkflowsRequest['offset'];
                }
            }
            if (workflowName !== null && workflowName !== undefined) {
                localVarQueryParameter['workflow_name'] = workflowName;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 重试工作流
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        retryWorkFlow: function (retryWorkFlowRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/workflows/{workflow_id}/executions/{execution_id}/retry",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var workflowId;
            var executionId;
            if (retryWorkFlowRequest !== null && retryWorkFlowRequest !== undefined) {
                if (retryWorkFlowRequest instanceof RetryWorkFlowRequest_1.RetryWorkFlowRequest) {
                    workflowId = retryWorkFlowRequest.workflowId;
                    executionId = retryWorkFlowRequest.executionId;
                }
                else {
                    workflowId = retryWorkFlowRequest['workflow_id'];
                    executionId = retryWorkFlowRequest['execution_id'];
                }
            }
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId', 'Required parameter workflowId was null or undefined when calling retryWorkFlow.');
            }
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId', 'Required parameter executionId was null or undefined when calling retryWorkFlow.');
            }
            options.pathParams = { 'workflow_id': workflowId, 'execution_id': executionId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取函数流指标
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showTenantMetric: function (showTenantMetricRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/workflow-statistic",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var period;
            var startTime;
            var endTime;
            if (showTenantMetricRequest !== null && showTenantMetricRequest !== undefined) {
                if (showTenantMetricRequest instanceof ShowTenantMetricRequest_1.ShowTenantMetricRequest) {
                    period = showTenantMetricRequest.period;
                    startTime = showTenantMetricRequest.startTime;
                    endTime = showTenantMetricRequest.endTime;
                }
                else {
                    period = showTenantMetricRequest['period'];
                    startTime = showTenantMetricRequest['start_time'];
                    endTime = showTenantMetricRequest['end_time'];
                }
            }
            if (period !== null && period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定函数流实例
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showWorkFlow: function (showWorkFlowRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/workflows/{workflow_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var workflowId;
            if (showWorkFlowRequest !== null && showWorkFlowRequest !== undefined) {
                if (showWorkFlowRequest instanceof ShowWorkFlowRequest_1.ShowWorkFlowRequest) {
                    workflowId = showWorkFlowRequest.workflowId;
                }
                else {
                    workflowId = showWorkFlowRequest['workflow_id'];
                }
            }
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId', 'Required parameter workflowId was null or undefined when calling showWorkFlow.');
            }
            options.pathParams = { 'workflow_id': workflowId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定工作流指标
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showWorkFlowMetric: function (showWorkFlowMetricRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/workflow-statistic/{workflow_urn}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var workflowUrn;
            var period;
            var startTime;
            var endTime;
            if (showWorkFlowMetricRequest !== null && showWorkFlowMetricRequest !== undefined) {
                if (showWorkFlowMetricRequest instanceof ShowWorkFlowMetricRequest_1.ShowWorkFlowMetricRequest) {
                    workflowUrn = showWorkFlowMetricRequest.workflowUrn;
                    period = showWorkFlowMetricRequest.period;
                    startTime = showWorkFlowMetricRequest.startTime;
                    endTime = showWorkFlowMetricRequest.endTime;
                }
                else {
                    workflowUrn = showWorkFlowMetricRequest['workflow_urn'];
                    period = showWorkFlowMetricRequest['period'];
                    startTime = showWorkFlowMetricRequest['start_time'];
                    endTime = showWorkFlowMetricRequest['end_time'];
                }
            }
            if (workflowUrn === null || workflowUrn === undefined) {
                throw new RequiredError('workflowUrn', 'Required parameter workflowUrn was null or undefined when calling showWorkFlowMetric.');
            }
            if (period !== null && period !== undefined) {
                localVarQueryParameter['period'] = period;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'workflow_urn': workflowUrn, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取指定函数流执行实例。
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        showWorkflowExecution: function (showWorkflowExecutionRequest) {
            var options = {
                method: "GET",
                url: "/v2/{project_id}/fgs/workflows/{workflow_id}/executions/{execution_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var workflowId;
            var executionId;
            if (showWorkflowExecutionRequest !== null && showWorkflowExecutionRequest !== undefined) {
                if (showWorkflowExecutionRequest instanceof ShowWorkflowExecutionRequest_1.ShowWorkflowExecutionRequest) {
                    workflowId = showWorkflowExecutionRequest.workflowId;
                    executionId = showWorkflowExecutionRequest.executionId;
                }
                else {
                    workflowId = showWorkflowExecutionRequest['workflow_id'];
                    executionId = showWorkflowExecutionRequest['execution_id'];
                }
            }
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId', 'Required parameter workflowId was null or undefined when calling showWorkflowExecution.');
            }
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId', 'Required parameter executionId was null or undefined when calling showWorkflowExecution.');
            }
            options.pathParams = { 'workflow_id': workflowId, 'execution_id': executionId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 同步执行函数流
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        startSyncWorkflowExecution: function (startSyncWorkflowExecutionRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/workflows/{workflow_id}/sync-executions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var workflowId;
            if (startSyncWorkflowExecutionRequest !== null && startSyncWorkflowExecutionRequest !== undefined) {
                if (startSyncWorkflowExecutionRequest instanceof StartSyncWorkflowExecutionRequest_1.StartSyncWorkflowExecutionRequest) {
                    workflowId = startSyncWorkflowExecutionRequest.workflowId;
                    body = startSyncWorkflowExecutionRequest.body;
                }
                else {
                    workflowId = startSyncWorkflowExecutionRequest['workflow_id'];
                    body = startSyncWorkflowExecutionRequest['body'];
                }
            }
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId', 'Required parameter workflowId was null or undefined when calling startSyncWorkflowExecution.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'workflow_id': workflowId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 开始执行函数流
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        startWorkflowExecution: function (startWorkflowExecutionRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/workflows/{workflow_id}/executions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var workflowId;
            var xCreateTime;
            var xWorkflowRunID;
            if (startWorkflowExecutionRequest !== null && startWorkflowExecutionRequest !== undefined) {
                if (startWorkflowExecutionRequest instanceof StartWorkflowExecutionRequest_1.StartWorkflowExecutionRequest) {
                    workflowId = startWorkflowExecutionRequest.workflowId;
                    body = startWorkflowExecutionRequest.body;
                    xCreateTime = startWorkflowExecutionRequest.xCreateTime;
                    xWorkflowRunID = startWorkflowExecutionRequest.xWorkflowRunID;
                }
                else {
                    workflowId = startWorkflowExecutionRequest['workflow_id'];
                    body = startWorkflowExecutionRequest['body'];
                    xCreateTime = startWorkflowExecutionRequest['X-Create-Time'];
                    xWorkflowRunID = startWorkflowExecutionRequest['X-WorkflowRun-ID'];
                }
            }
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId', 'Required parameter workflowId was null or undefined when calling startWorkflowExecution.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (xCreateTime !== undefined && xCreateTime !== null) {
                localVarHeaderParameter['X-Create-Time'] = String(xCreateTime);
            }
            if (xWorkflowRunID !== undefined && xWorkflowRunID !== null) {
                localVarHeaderParameter['X-WorkflowRun-ID'] = String(xWorkflowRunID);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'workflow_id': workflowId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 停止工作流
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        stopWorkFlow: function (stopWorkFlowRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/fgs/workflows/{workflow_id}/executions/{execution_id}/terminate",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var workflowId;
            var executionId;
            if (stopWorkFlowRequest !== null && stopWorkFlowRequest !== undefined) {
                if (stopWorkFlowRequest instanceof StopWorkFlowRequest_1.StopWorkFlowRequest) {
                    workflowId = stopWorkFlowRequest.workflowId;
                    executionId = stopWorkFlowRequest.executionId;
                }
                else {
                    workflowId = stopWorkFlowRequest['workflow_id'];
                    executionId = stopWorkFlowRequest['execution_id'];
                }
            }
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId', 'Required parameter workflowId was null or undefined when calling stopWorkFlow.');
            }
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId', 'Required parameter executionId was null or undefined when calling stopWorkFlow.');
            }
            options.pathParams = { 'workflow_id': workflowId, 'execution_id': executionId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 修改指定函数流实例
         *
         * 详细说明请参考华为云API Explorer。
         * Please refer to Huawei cloud API Explorer for details.
         */
        updateWorkFlow: function (updateWorkFlowRequest) {
            var options = {
                method: "PUT",
                url: "/v2/{project_id}/fgs/workflows/{workflow_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var workflowId;
            if (updateWorkFlowRequest !== null && updateWorkFlowRequest !== undefined) {
                if (updateWorkFlowRequest instanceof UpdateWorkFlowRequest_1.UpdateWorkFlowRequest) {
                    workflowId = updateWorkFlowRequest.workflowId;
                    body = updateWorkFlowRequest.body;
                }
                else {
                    workflowId = updateWorkFlowRequest['workflow_id'];
                    body = updateWorkFlowRequest['body'];
                }
            }
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId', 'Required parameter workflowId was null or undefined when calling updateWorkFlow.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'workflow_id': workflowId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    };
};
exports.ParamCreater = ParamCreater;
function newClient(client) {
    return new FunctionGraphClient(client);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;

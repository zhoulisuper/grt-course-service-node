"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuncVpc = void 0;
var FuncVpc = /** @class */ (function () {
    function FuncVpc(vpcName, vpcId, subnetName, subnetId, cidr, gateway) {
        this['vpc_name'] = vpcName;
        this['vpc_id'] = vpcId;
        this['subnet_name'] = subnetName;
        this['subnet_id'] = subnetId;
        this['cidr'] = cidr;
        this['gateway'] = gateway;
    }
    FuncVpc.prototype.withVpcName = function (vpcName) {
        this['vpc_name'] = vpcName;
        return this;
    };
    Object.defineProperty(FuncVpc.prototype, "vpcName", {
        get: function () {
            return this['vpc_name'];
        },
        set: function (vpcName) {
            this['vpc_name'] = vpcName;
        },
        enumerable: false,
        configurable: true
    });
    FuncVpc.prototype.withVpcId = function (vpcId) {
        this['vpc_id'] = vpcId;
        return this;
    };
    Object.defineProperty(FuncVpc.prototype, "vpcId", {
        get: function () {
            return this['vpc_id'];
        },
        set: function (vpcId) {
            this['vpc_id'] = vpcId;
        },
        enumerable: false,
        configurable: true
    });
    FuncVpc.prototype.withSubnetName = function (subnetName) {
        this['subnet_name'] = subnetName;
        return this;
    };
    Object.defineProperty(FuncVpc.prototype, "subnetName", {
        get: function () {
            return this['subnet_name'];
        },
        set: function (subnetName) {
            this['subnet_name'] = subnetName;
        },
        enumerable: false,
        configurable: true
    });
    FuncVpc.prototype.withSubnetId = function (subnetId) {
        this['subnet_id'] = subnetId;
        return this;
    };
    Object.defineProperty(FuncVpc.prototype, "subnetId", {
        get: function () {
            return this['subnet_id'];
        },
        set: function (subnetId) {
            this['subnet_id'] = subnetId;
        },
        enumerable: false,
        configurable: true
    });
    FuncVpc.prototype.withCidr = function (cidr) {
        this['cidr'] = cidr;
        return this;
    };
    FuncVpc.prototype.withGateway = function (gateway) {
        this['gateway'] = gateway;
        return this;
    };
    return FuncVpc;
}());
exports.FuncVpc = FuncVpc;

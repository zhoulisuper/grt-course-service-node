"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuncMount = void 0;
var FuncMount = /** @class */ (function () {
    function FuncMount(mountType, mountResource, mountSharePath, localMountPath) {
        this['mount_type'] = mountType;
        this['mount_resource'] = mountResource;
        this['mount_share_path'] = mountSharePath;
        this['local_mount_path'] = localMountPath;
    }
    FuncMount.prototype.withMountType = function (mountType) {
        this['mount_type'] = mountType;
        return this;
    };
    Object.defineProperty(FuncMount.prototype, "mountType", {
        get: function () {
            return this['mount_type'];
        },
        set: function (mountType) {
            this['mount_type'] = mountType;
        },
        enumerable: false,
        configurable: true
    });
    FuncMount.prototype.withMountResource = function (mountResource) {
        this['mount_resource'] = mountResource;
        return this;
    };
    Object.defineProperty(FuncMount.prototype, "mountResource", {
        get: function () {
            return this['mount_resource'];
        },
        set: function (mountResource) {
            this['mount_resource'] = mountResource;
        },
        enumerable: false,
        configurable: true
    });
    FuncMount.prototype.withMountSharePath = function (mountSharePath) {
        this['mount_share_path'] = mountSharePath;
        return this;
    };
    Object.defineProperty(FuncMount.prototype, "mountSharePath", {
        get: function () {
            return this['mount_share_path'];
        },
        set: function (mountSharePath) {
            this['mount_share_path'] = mountSharePath;
        },
        enumerable: false,
        configurable: true
    });
    FuncMount.prototype.withLocalMountPath = function (localMountPath) {
        this['local_mount_path'] = localMountPath;
        return this;
    };
    Object.defineProperty(FuncMount.prototype, "localMountPath", {
        get: function () {
            return this['local_mount_path'];
        },
        set: function (localMountPath) {
            this['local_mount_path'] = localMountPath;
        },
        enumerable: false,
        configurable: true
    });
    return FuncMount;
}());
exports.FuncMount = FuncMount;

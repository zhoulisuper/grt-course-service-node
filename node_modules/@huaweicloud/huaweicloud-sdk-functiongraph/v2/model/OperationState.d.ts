import { Action } from './Action';
import { OnError } from './OnError';
import { StateDataFilter } from './StateDataFilter';
export declare class OperationState {
    id?: string;
    name?: string;
    type?: OperationStateTypeEnum;
    end?: boolean;
    transition?: string;
    private 'state_data_filter'?;
    private 'action_mode'?;
    actions?: Array<Action>;
    private 'on_errors'?;
    constructor();
    withId(id: string): OperationState;
    withName(name: string): OperationState;
    withType(type: OperationStateTypeEnum): OperationState;
    withEnd(end: boolean): OperationState;
    withTransition(transition: string): OperationState;
    withStateDataFilter(stateDataFilter: StateDataFilter): OperationState;
    set stateDataFilter(stateDataFilter: StateDataFilter | undefined);
    get stateDataFilter(): StateDataFilter | undefined;
    withActionMode(actionMode: OperationStateActionModeEnum): OperationState;
    set actionMode(actionMode: OperationStateActionModeEnum | undefined);
    get actionMode(): OperationStateActionModeEnum | undefined;
    withActions(actions: Array<Action>): OperationState;
    withOnErrors(onErrors: Array<OnError>): OperationState;
    set onErrors(onErrors: Array<OnError> | undefined);
    get onErrors(): Array<OnError> | undefined;
}
/**
    * @export
    * @enum {string}
    */
export declare enum OperationStateTypeEnum {
    OPERATION = "Operation",
    SLEEP = "Sleep",
    END = "End"
}
/**
    * @export
    * @enum {string}
    */
export declare enum OperationStateActionModeEnum {
    SEQUENTIAL = "sequential",
    PARALLEL = "parallel"
}

"use strict";
/*
 * Copyright 2020 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientBuilder = void 0;
var HcClient_1 = require("./HcClient");
var DefaultHttpClient_1 = require("./http/DefaultHttpClient");
var BasicCredentials_1 = require("./auth/BasicCredentials");
var GlobalCredentials_1 = require("./auth/GlobalCredentials");
var SdkException_1 = require("./exception/SdkException");
var path = require('path');
var ClientBuilder = /** @class */ (function () {
    function ClientBuilder(init, credentialType) {
        this.credentialType = ["BasicCredentials", "GlobalCredentials"];
        this.envParams = process.env;
        this.init = init;
        if (credentialType) {
            this.credentialType = credentialType.split(",");
        }
    }
    ClientBuilder.prototype.withEndpoint = function (endpoint) {
        this.endpoint = endpoint;
        return this;
    };
    ClientBuilder.prototype.withCredential = function (credential) {
        this.credential = credential;
        return this;
    };
    ClientBuilder.prototype.withProxyAgent = function (proxyAgent) {
        this.proxyAgent = proxyAgent;
        return this;
    };
    ClientBuilder.prototype.withRegion = function (region) {
        this.region = region;
        return this;
    };
    ClientBuilder.prototype.build = function () {
        var axiosOptions = {
            disableSslVerification: true
        };
        if (this.proxyAgent) {
            Object.assign(axiosOptions, { proxyAgent: this.proxyAgent });
        }
        if (!this.credential) {
            this.credential = this.getCredentialFromEnvironment();
        }
        if (!this.credential) {
            throw new SdkException_1.SdkException("credential can not be null, ".concat(this.credentialType, "Credential objects are required"));
        }
        var client = new DefaultHttpClient_1.DefaultHttpClient(axiosOptions);
        var hcClient = new HcClient_1.HcClient(client);
        hcClient.withEndpoint(this.endpoint).withCredential(this.credential);
        if (this.region) {
            hcClient.withRegion(this.region);
        }
        return this.init(hcClient);
    };
    /**
     * 从环境变量获取 HUAWEICLOUD_SDK_TYPE
     * 环境变量里没有则使用 credentialType[0]
     * 生成credential实体
     * 从环境变量获取 AK SK projectId/domainId 进行赋值， 如果环境变量是GlobalCredentials，则赋值domainId
     * @returns Credentials
     */
    ClientBuilder.prototype.getCredentialFromEnvironment = function () {
        var sdkType = process.env.HUAWEICLOUD_SDK_TYPE;
        var credentialTYPE = this.whichCredential(sdkType);
        return this.getInputParamCredential(credentialTYPE, this.envParams);
    };
    ClientBuilder.prototype.whichCredential = function (sdkType) {
        var credentialTYPE;
        if (sdkType) {
            switch (sdkType) {
                case 'BasicCredentials':
                    credentialTYPE = new BasicCredentials_1.BasicCredentials();
                    break;
                case 'GlobalCredentials':
                    credentialTYPE = new GlobalCredentials_1.GlobalCredentials();
                    break;
                default:
                    var obj = {};
                    var definedCredPath = path.join(this.init().getPath(), "".concat(sdkType));
                    if (!obj[sdkType]) {
                        credentialTYPE = require(definedCredPath);
                        // 多加一层
                        obj[sdkType] = credentialTYPE[sdkType];
                    }
                    credentialTYPE = new obj[sdkType]();
                    break;
            }
        }
        else {
            // 默认是basic
            credentialTYPE = new BasicCredentials_1.BasicCredentials();
        }
        return credentialTYPE;
    };
    ClientBuilder.prototype.getInputParamCredential = function (CredentialsType, credential) {
        // 判断是否有_
        var hash = {};
        for (var key in credential) {
            if (key.indexOf("HUAWEICLOUD_SDK_") == 0) {
                var value = credential[key];
                key = key.substring(16);
                if (key.indexOf('_') == -1) {
                    key = key.toLowerCase();
                    key = 'with' + key.charAt(0).toUpperCase() + key.slice(1);
                }
                else {
                    var arr = key.split('_').map(function (item) {
                        item = item.toLowerCase();
                        return item.charAt(0).toUpperCase() + item.slice(1);
                    });
                    if (Array.isArray(arr)) {
                        key = 'with' + arr.join("");
                    }
                }
                hash[key] = value;
            }
        }
        credential = hash;
        for (var key in credential) {
            if (CredentialsType[key]) {
                CredentialsType[key](credential[key]);
            }
        }
        return CredentialsType;
    };
    return ClientBuilder;
}());
exports.ClientBuilder = ClientBuilder;

"use strict";
/*
 * Copyright 2020 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalCredentials = void 0;
var AKSKSigner_1 = require("./AKSKSigner");
var IHttpRequestBuilder_1 = require("../http/IHttpRequestBuilder");
var AKSKSigner_2 = require("./AKSKSigner");
var iam_service_1 = require("../internal/services/iam.service");
var authcache_1 = require("../internal/services/authcache");
var GlobalCredentials = /** @class */ (function () {
    function GlobalCredentials(data) {
        if (data === void 0) { data = {}; }
        this.ak = data === null || data === void 0 ? void 0 : data.ak;
        this.sk = data === null || data === void 0 ? void 0 : data.sk;
        this.securityToken = data === null || data === void 0 ? void 0 : data.securityToken;
        this.domainId = data === null || data === void 0 ? void 0 : data.domainId;
        this.iamEndpoint = data === null || data === void 0 ? void 0 : data.iamEndpoint;
    }
    GlobalCredentials.prototype.withAk = function (ak) {
        this.ak = ak;
        return this;
    };
    GlobalCredentials.prototype.withSk = function (sk) {
        this.sk = sk;
        return this;
    };
    GlobalCredentials.prototype.withDomainId = function (domainId) {
        this.domainId = domainId;
        return this;
    };
    GlobalCredentials.prototype.withSecurityToken = function (securityToken) {
        this.securityToken = securityToken;
        return this;
    };
    GlobalCredentials.prototype.withIamEndpoint = function (iamEndpoint) {
        this.iamEndpoint = iamEndpoint;
        return this;
    };
    GlobalCredentials.prototype.getAk = function () {
        if (!this.ak) {
            throw new AKSKSigner_2.RequiredError('AK cannot be empty or undefined.');
        }
        return this.ak;
    };
    GlobalCredentials.prototype.getSk = function () {
        if (!this.sk) {
            throw new AKSKSigner_2.RequiredError('SK cannot be empty or undefined.');
        }
        return this.sk;
    };
    GlobalCredentials.prototype.setDomainId = function (value) {
        this.domainId = value;
    };
    GlobalCredentials.prototype.getPathParams = function () {
        var pathParams = {};
        if (this.domainId) {
            Object.assign(pathParams, { domain_id: this.domainId });
        }
        return pathParams;
    };
    GlobalCredentials.prototype.processAuthRequest = function (httpRequest) {
        if (this.ak === null || this.ak === undefined) {
            throw new AKSKSigner_2.RequiredError('AK cannot be empty or undefined.');
        }
        if (this.sk === null || this.sk === undefined) {
            throw new AKSKSigner_2.RequiredError('SK cannot be empty or undefined.');
        }
        var builder = new IHttpRequestBuilder_1.HttpRequestBuilder();
        builder.addPathParams(this.getPathParams());
        // 替换所有的path参数
        if (this.domainId) {
            var url = parsePath(httpRequest.endpoint, this.getPathParams());
            builder.withEndpoint(url);
        }
        if (this.domainId) {
            builder.addHeaders("X-Domain-Id", this.domainId);
        }
        if (this.securityToken) {
            builder.addHeaders("X-Security-Token", this.securityToken);
        }
        // builder.addHeaders("Content-Type", "application/json");
        builder.addAllHeaders(httpRequest.headers);
        Object.assign(httpRequest, builder.build());
        var headers = AKSKSigner_1.AKSKSigner.sign(httpRequest, this);
        builder.addAllHeaders(headers);
        return Object.assign(httpRequest, builder.build());
    };
    GlobalCredentials.prototype.processAuthParams = function (hcClient) {
        var _this = this;
        if (this.domainId) {
            return Promise.resolve(this);
        }
        var authCacheInstance = authcache_1.AuthCache.instance();
        var akWithName = this.getAk();
        if (authCacheInstance.getCache(akWithName)) {
            this.domainId = authCacheInstance.getCache(akWithName);
            return Promise.resolve(this);
        }
        return new iam_service_1.IamService(hcClient, this.iamEndpoint).getDomainId().then(function (domainId) {
            authCacheInstance.putCache(akWithName, domainId);
            _this.domainId = domainId;
            return _this;
        });
    };
    return GlobalCredentials;
}());
exports.GlobalCredentials = GlobalCredentials;
function parsePath(path, params) {
    if (!path || !params) {
        return path;
    }
    return Object.keys(params).reduce(function (parsedPath, param) {
        var value = encodeURIComponent(params[param]);
        return parsedPath.replace(new RegExp("{".concat(param, "}")), value);
    }, path);
}

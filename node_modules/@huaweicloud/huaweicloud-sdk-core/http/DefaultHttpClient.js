"use strict";
/*
 * Copyright 2020 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultHttpClient = void 0;
var axios_1 = __importDefault(require("axios"));
var querystring_1 = require("querystring");
var HttpsProxyAgent = require("https-proxy-agent");
var logger_1 = require("../logger");
var DefaultHttpClient = /** @class */ (function () {
    function DefaultHttpClient(options) {
        if (options === void 0) { options = {}; }
        // A request header consists of its case-insensitive name followed by a colon ':'
        // from: https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers
        this.DEFAULT_HEADERS = {
            Accept: 'application/json',
            'content-type': 'application/json'
        };
        this.defaultOption = options;
        // Logging
        if (typeof options.logger !== 'undefined') {
            this.logger = options.logger;
            if (typeof options.logLevel !== 'undefined') {
                this.logger.debug('The logLevel given to client was ignored as you also gave logger');
            }
        }
        else {
            this.logger = (0, logger_1.getLogger)(DefaultHttpClient.loggerName, options.logLevel || logger_1.LogLevel.ERROR, options.logger);
        }
        this.init();
    }
    DefaultHttpClient.prototype.init = function () {
        var _this = this;
        // proxy
        var proxyAgent;
        if (this.defaultOption.proxy && this.defaultOption.proxy !== '') {
            proxyAgent = HttpsProxyAgent(this.defaultOption.proxy);
        }
        this.axiosInstance = axios_1.default.create({
            maxContentLength: Infinity,
            headers: Object.assign(this.DEFAULT_HEADERS, this.defaultOption.headers),
            proxy: false,
            httpAgent: proxyAgent,
            httpsAgent: proxyAgent
        });
        this.axiosInstance.interceptors.request.use(function (request) {
            var url = request.url, method = request.method, data = request.data, headers = request.headers;
            _this.logger.debug("Request: ".concat(method.toUpperCase(), " ").concat(url, " ").concat(JSON.stringify(headers), " ").concat(JSON.stringify(data)));
            return request;
        });
        this.axiosInstance.interceptors.response.use(function (response) {
            var _a = response.config, url = _a.url, method = _a.method, status = response.status, statusText = response.statusText, headers = response.headers;
            var statusStr = '';
            if (status && statusText) {
                statusStr += "".concat(status, ":").concat(statusText, " ");
            }
            else if (status) {
                statusStr += "".concat(status, " ");
            }
            else if (statusText) {
                statusStr += "".concat(statusText, " ");
            }
            var requestId = response.headers ? response.headers['x-request-id'] : undefined;
            var reponseLength = response.result ? JSON.stringify(response.result).length : 1;
            _this.logger.debug("Response: ".concat(method.toUpperCase(), " ").concat(statusStr, " ").concat(url, " ").concat(JSON.stringify(headers), " ").concat(reponseLength, " ").concat(requestId));
            return response;
        });
        delete this.axiosInstance.defaults.headers.post['Content-Type'];
        delete this.axiosInstance.defaults.headers.put['Content-Type'];
        this.logger.debug('initialized');
    };
    DefaultHttpClient.prototype.sendRequest = function (httpRequest) {
        var _this = this;
        return this._request(httpRequest).then(function (res) {
            DefaultHttpClient.httpResponse = res;
            var result = _this._convertResponse(httpRequest, res);
            return {
                data: result instanceof String ? undefined : result,
                statusCode: res.status,
                headers: res.headers
            };
        }).catch(function (err) {
            // TODO:
            DefaultHttpClient.httpResponse = err;
            var errorRespone = _this.formatError(err);
            _this.logger.error('some error found:', errorRespone);
            throw errorRespone;
        });
    };
    DefaultHttpClient.prototype._request = function (httpRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, queryParams, method, data, headers, url, requestParams, methods, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = httpRequest.endpoint, queryParams = httpRequest.queryParams, method = httpRequest.method, data = httpRequest.data, headers = httpRequest.headers;
                        headers = headers || {};
                        this.logger.debug("send request start: ".concat(endpoint, " "));
                        url = endpoint;
                        url = stripTrailingSlash(url);
                        headers['User-Agent'] = "huaweicloud-usdk-nodejs/3.0";
                        requestParams = {
                            url: url,
                            method: method,
                            headers: headers,
                            params: queryParams,
                            data: data,
                            paramsSerializer: function (params) {
                                return (0, querystring_1.stringify)(params);
                            },
                        };
                        methods = ['PUT', 'POST', 'PATCH', 'DELETE'];
                        if (method && methods.indexOf(method.toUpperCase()) !== -1) {
                            requestParams = Object.assign(requestParams, {
                                transformRequest: [this.transformOptions.bind(this)]
                            });
                        }
                        // TODO
                        DefaultHttpClient.httpReqParam = requestParams;
                        return [4 /*yield*/, this.axiosInstance(requestParams)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    DefaultHttpClient.prototype._convertResponse = function (httpRequest, axiosResult) {
        if (httpRequest['responseHeaders'] && axiosResult.data) {
            var responseHeaders = httpRequest['responseHeaders'];
            for (var _i = 0, responseHeaders_1 = responseHeaders; _i < responseHeaders_1.length; _i++) {
                var item = responseHeaders_1[_i];
                var lowerItem = item.toString().toLowerCase();
                if (!axiosResult.data[item] && axiosResult.headers[lowerItem]) {
                    axiosResult.data[item] = axiosResult.headers[lowerItem];
                }
            }
        }
        return axiosResult.data;
    };
    DefaultHttpClient.prototype.transformOptions = function (data, headers) {
        if (headers['content-type'] === 'multipart/form-data') {
            // data is form-data object
            for (var _i = 0, _a = Object.entries(data.getHeaders()); _i < _a.length; _i++) {
                var _b = _a[_i], header = _b[0], value = _b[1];
                headers[header] = value;
            }
            return data;
        }
        headers['content-type'] = 'application/json';
        return JSON.stringify(data);
    };
    DefaultHttpClient.prototype.formatError = function (error) {
        var _a;
        var transformedResponse = {
            data: error.response ? error.response.data : undefined,
            status: error.response ? error.response.status : undefined,
            headers: error.response ? error.response.headers : undefined,
            message: error.message || undefined,
            config: error.config,
            originalError: error,
            requestId: (_a = error.response) === null || _a === void 0 ? void 0 : _a.headers['x-request-id']
        };
        return transformedResponse;
    };
    DefaultHttpClient.loggerName = "DefaultHttpClient";
    return DefaultHttpClient;
}());
exports.DefaultHttpClient = DefaultHttpClient;
function stripTrailingSlash(url) {
    // Match a forward slash / at the end of the string ($)
    // @ts-ignore
    return url.replace(/\/$/, '');
}

"use strict";
/*
 * Copyright 2020 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExceptionUtil = void 0;
var ClientRequestException_1 = require("./ClientRequestException");
var ServerResponseException_1 = require("./ServerResponseException");
var ServiceResponseException_1 = require("./ServiceResponseException");
var ExceptionUtil = /** @class */ (function () {
    function ExceptionUtil() {
    }
    ExceptionUtil.generalException = function (exception) {
        var data = exception.data || {};
        var errorCode = data.error ? data.error.code : exception.status;
        var errorMsg = data.error ? data.error.message : exception.message;
        var requestId = exception.requestId;
        var httpStatusCode = exception.status;
        if (httpStatusCode) {
            if (httpStatusCode >= 400 && httpStatusCode < 500) {
                return new ClientRequestException_1.ClientRequestException(httpStatusCode, errorMsg, errorCode, requestId);
            }
            else if (httpStatusCode >= 500 && httpStatusCode < 600) {
                return new ServerResponseException_1.ServerResponseException(httpStatusCode, errorMsg, errorCode, requestId);
            }
        }
        return new ServiceResponseException_1.ServiceResponseException(httpStatusCode, errorMsg, errorCode, requestId);
    };
    return ExceptionUtil;
}());
exports.ExceptionUtil = ExceptionUtil;
